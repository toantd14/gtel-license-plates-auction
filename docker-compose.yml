services:

  postgres:
    image: postgres
    container_name: postgresql
    restart: unless-stopped
    environment:
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: password
      PGDATA: /data/postgres
    volumes:
      - postgres:/data/postgres
      - ./initdb.sql:/docker-entrypoint-initdb.d/init.sql
    ports:
      - '5431:5432'
    networks:
      - default

  mongo:
    image: mongo:6-jammy
    container_name: mongodb
    ports:
      - '27017:27017'
    volumes:
      - mongo:/data/mongo

  redis:
    image: redis:6.2-alpine
    container_name: redis
    hostname: redis
    ports:
      - '6379:6379'
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
      - REDIS_DISABLE_COMMANDS=FLUSHDB;FLUSHALL
    networks:
      - default

  zookeeper:
    image: confluentinc/cp-zookeeper:latest
    container_name: zookeeper
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    ports:
      - '22181:2181'
    networks:
      - default

  kafka:
    image: confluentinc/cp-kafka:latest
    container_name: kafka
    depends_on:
      - zookeeper
    ports:
      - '29092:29092'
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: zookeeper:2181
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:9092,PLAINTEXT_HOST://localhost:29092
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_INTER_BROKER_LISTENER_NAME: PLAINTEXT
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
    networks:
      - default

  kafka-ui:
    image: provectuslabs/kafka-ui:latest
    container_name: ms-kafka-ui
    ports:
      - "9191:8080"
    environment:
      KAFKA_CLUSTERS_0_NAME: local
      KAFKA_CLUSTERS_0_BOOTSTRAPSERVERS: kafka:9092  # Internal service communication
    depends_on:
      - kafka
    networks:
      - default

  prometheus:
    image: prom/prometheus
    container_name: prometheus
    restart: unless-stopped
    command:
      - --config.file=/etc/prometheus/prometheus.yml
    volumes:
      - ./prometheus.yml:/etc/prometheus/prometheus.yml
    ports:
      - '9090:9090'
    networks:
      - default

  grafana:
    image: grafana/grafana
    container_name: grafana
    restart: unless-stopped
    environment: # account: grafana/password
      - GF_SECURITY_ADMIN_USER=grafana
      - GF_SECURITY_ADMIN_PASSWORD=password
    ports:
      - '3000:3000'
    links:
      - prometheus
    volumes:
      - grafana:/var/lib/grafana
    networks:
      - default

#  api-gateway:
#    container_name: api-gateway
#    build:
#      context: ./api-gateway
#      dockerfile: Dockerfile
#    ports:
#      - "4953:4953"
#    env_file:
#      - host.local.env
#    networks:
#      - default

#  authentication:
#    container_name: auth-service
#    build:
#      context: ./authentication
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default

#  account:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  authentication:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  account:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  authentication:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  account:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  authentication:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default
#
#  account:
#    container_name: auth-service
#    build:
#      context: ./
#      dockerfile: Dockerfile
#    ports:
#      - "8080:8080"
#    env_file:
#      - host.local.env
#    networks:
#      - default


networks:
  default:
    name: micro-kube-network

volumes:
  postgres:
  mongo:
  grafana: